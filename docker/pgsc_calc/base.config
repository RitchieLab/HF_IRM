/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    pgscatalog/pgsccalc Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {
    // defaults for unlabelled processes
    // however all processes are labelled
    cpus   = { check_max( 32    * task.attempt, 'cpus'   ) }
    memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    time   = { check_max( 240.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // reasonable resource limits for medium sized datasets
    withLabel:process_low {
        cpus   = { check_max( 32     * task.attempt, 'cpus'    ) }
        memory = { check_max( 200.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 240.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 32     * task.attempt, 'cpus'    ) }
        memory = { check_max( 200.GB * task.attempt, 'memory'   ) }
        time   = { check_max( 240.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 32    * task.attempt, 'cpus'    ) }
        memory = { check_max( 200.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 240.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 240.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:DUMPSOFTWAREVERSIONS {
        cache = false
    }
    withLabel:plink2{
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
}
