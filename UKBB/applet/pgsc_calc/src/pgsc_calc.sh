#!/bin/bash
# pgsc_calc 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of input: '${input[@]}'"
    echo "Value of command: '$command'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    mkdir input

    for i in ${!input[@]}
    do
        dx download "${input[$i]}" -o input/
    done



    # Fill in your application code here.
    
    mkdir output
    mkdir output/test
    touch output/test.sh
    touch output/test/test2.sh

    docker pull katiecardone26/pgsc_calc_general:latest

    fullpath=$(pwd)
    docker run -v $fullpath/input/:/app/input/ -v $fullpath/output/:/app/output/ katiecardone26/pgsc_calc_general:latest $command

    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    for file in output/*; do
    if [ -f "$file" ]; then
        file_id=$(dx upload "$file" --brief)
        dx-jobutil-add-output output_files "$file_id" --class=array:file
    elif [ -d "$file" ]; then
	while IFS= read -r fid; do
		dx-jobutil-add-output output_files "$fid" --class=array:file
	done < <(dx upload -r "$file" --brief)
    fi
    done

}
